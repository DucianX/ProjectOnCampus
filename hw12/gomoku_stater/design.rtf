{\rtf1\ansi\ansicpg936\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14600\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Data Structures:\
	nested lists for putting the stones\
	\
Classes:\
	stones (2 instances for white and black)\
		stone.get_location # using a formula based on the board width and height\
	board\
		board.size\
	aligned-stone-counter (to record if 5 stones align)\
	game (to decide whose turn to put a stone, when the game is over)\
\
Methods:\
	static ones:\
		align-stone-counter\
		game_over_detector\
\
	non-static ones:\
		stone.display # putting the stones on the board as click;\
		stone.color_turner (b/w in turns)\
		stone.click # to allow user click some where near the cross (eudic distance)\
\
		board.is_occupied (if a stone is already placed, that place is no longer placeable, needs to be false to place a stone on it)\
		board.display (draw itself to the user)\
		board.rec_location() # record locations of stones on board;\
\
		game.over # detect and announce a game is over\
\
Driver:\
	when user makes a move: create a new stone instance from input\
	when it\'92s the computer\'92s turn: follow a specified algorithm to make a move\
	when game over is assessed: define who\'92s the winner and print winner to the screen\
		\
	}