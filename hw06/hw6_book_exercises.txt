1. Legal. The definition of proc will be overwrite.
2. Yes.
3. Yes. (Proc implicitly returns 'None')
4. Yes.
5. No. TypeError will be raised because proc expects 2 arguments.
6. No. 1 argument expected but 2 are given.
7. Yes.
8. This will print 10. 
    The num variable in the main function remains unchanged 
    because the x inside proc is a local variable 
    and doesn't affect the value of num.

    To improve it:
    def proc(x):
        return 2*x*x.

9. It is legal.
    The x inside proc is a local variable to that function, called formal argument,
    which takes whatever passed to the function when it's called.
    
    The x inside the main function is a separate local variable.
    Variables within a function (including function parameters) 
    are local to that function and don't interfere with variables of the same name in other functions.

10. This is legal. Variable names in the calling function and the called function don't have to match. 